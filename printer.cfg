# This file contains common pin mappings for the Azteeg X5 Mini v3. To use
# this config, the firmware should be compiled for the LPC1769.

# See docs/Config_Reference.md for a description of parameters.

# MCU 'mcu' config: BUS_PINS_i2c1=P0.1,P0.0 BUS_PINS_i2c0=P0.28,P0.27 BUS_PINS_i2c2=P0.11,P0.10 BUS_PINS_i2c1a=P0.20,P0.19 BUS_PINS_ssp1=P0.8,P0.9,P0.7 STEPPER_BOTH_EDGE=1 ADC_MAX=4095 BUS_PINS_ssp0=P0.17,P0.18,P0.15 PWM_MAX=255 CLOCK_FREQ=120000000 RESERVE_PINS_USB=P0.30,P0.29,P2.9 MCU=lpc1769 STATS_SUMSQ_BASE=256

[mcu]
serial: /dev/serial/by-id/usb-Klipper_lpc1769_0AB00001841C29AFBDEAA25BC22000F5-if00

[printer]
kinematics: cartesian
max_velocity: 300
max_accel: 3000
max_z_velocity: 5
max_z_accel: 100

[stepper_x]
step_pin: P2.1
dir_pin: !P0.11
microsteps: 16
full_steps_per_rotation: 200
rotation_distance: 39
endstop_pin: !P1.24
position_endstop: 0
position_max: 250
homing_speed: 50
# homing_retract_dist: 0

[stepper_y]
step_pin: P2.2
dir_pin: P0.20
microsteps: 16
full_steps_per_rotation: 200
rotation_distance: 39
endstop_pin: !P1.25
position_endstop: 0
position_max: 210
homing_speed: 50
# homing_retract_dist: 0

[stepper_z]
step_pin: P2.3
dir_pin: !P0.22
microsteps: 16
full_steps_per_rotation: 200
rotation_distance: 8
endstop_pin: ~!P1.29
position_endstop: 210
position_max: 210
homing_speed: 50

[extruder]
step_pin: P2.0
dir_pin: !P0.5
microsteps: 16
full_steps_per_rotation: 200
rotation_distance: 33.500
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: P2.4
sensor_type: ATC Semitec 104NT-4-R025H42G
sensor_pin: P0.24
control: pid
pid_Kp: 38
pid_Ki: 2.50
pid_Kd: 35
min_temp: 0
max_temp: 300

[heater_bed]
heater_pin: P2.7
sensor_type: ATC Semitec 104NT-4-R025H42G
sensor_pin: P0.23
control: pid
pid_Kp: 169.8
pid_Ki: 5.631
pid_Kd: 1280
min_temp: 0
max_temp: 140

[fan]
pin: P1.22
max_power: 0.33
shutdown_speed: 0
off_below: 0.10

[heater_fan hotend]
pin: P0.26
max_power: 0.33
shutdown_speed: 0
heater: extruder
heater_temp: 45
fan_speed: 1.0

[bltouch]
sensor_pin: ^P1.26
#   Pin connected to the BLTouch sensor pin. Most BLTouch devices
#   require a pullup on the sensor pin (prefix the pin name with "^").
#   This parameter must be provided.
control_pin: P1.23
#   Pin connected to the BLTouch control pin. This parameter must be
#   provided.
#pin_move_time: 0.680
#   The amount of time (in seconds) to wait for the BLTouch pin to
#   move up or down. The default is 0.680 seconds.
#stow_on_each_sample: True
#   This determines if Klipper should command the pin to move up
#   between each probe attempt when performing a multiple probe
#   sequence. Read the directions in docs/BLTouch.md before setting
#   this to False. The default is True.
#probe_with_touch_mode: False
#   If this is set to True then Klipper will probe with the device in
#   "touch_mode". The default is False (probing in "pin_down" mode).
#pin_up_reports_not_triggered: True
#   Set if the BLTouch consistently reports the probe in a "not
#   triggered" state after a successful "pin_up" command. This should
#   be True for all genuine BLTouch devices. Read the directions in
#   docs/BLTouch.md before setting this to False. The default is True.
#pin_up_touch_mode_reports_triggered: True
#   Set if the BLTouch consistently reports a "triggered" state after
#   the commands "pin_up" followed by "touch_mode". This should be
#   True for all genuine BLTouch devices. Read the directions in
#   docs/BLTouch.md before setting this to False. The default is True.
#set_output_mode:
#   Request a specific sensor pin output mode on the BLTouch V3.0 (and
#   later). This setting should not be used on other types of probes.
#   Set to "5V" to request a sensor pin output of 5 Volts (only use if
#   the controller board needs 5V mode and is 5V tolerant on its input
#   signal line). Set to "OD" to request the sensor pin output use
#   open drain mode. The default is to not request an output mode.
#x_offset:
#y_offset:
z_offset: 5
speed: 8
#lift_speed:
#samples:
#sample_retract_dist:
#samples_result:
#samples_tolerance:
#samples_tolerance_retries:
#   See the "probe" section for information on these parameters.

[tmc2660 stepper_x]
cs_pin: P0.10
spi_speed: 100000
#interpolate: True
#   If true, enable step interpolation (the driver will internally
#   step at a rate of 256 micro-steps). This only works if microsteps
#   is set to 16. Interpolation does introduce a small systemic
#   positional deviation - see TMC_Drivers.md for details. The default
#   is True.
run_current: 1
#   The amount of current (in amps RMS) used by the driver during
#   stepper movement. This parameter must be provided.
sense_resistor: 100
idle_current_percent: 20
#   The percentage of the run_current the stepper driver will be
#   lowered to when the idle timeout expires (you need to set up the
#   timeout using a [idle_timeout] config section). The current will
#   be raised again once the stepper has to move again. Make sure to
#   set this to a high enough value such that the steppers do not lose
#   their position. There is also small delay until the current is
#   raised again, so take this into account when commanding fast moves
#   while the stepper is idling. The default is 100 (no reduction).
#driver_TBL: 2
#driver_RNDTF: 0
#driver_HDEC: 0
#driver_CHM: 0
#driver_HEND: 3
#driver_HSTRT: 3
#driver_TOFF: 4
#driver_SEIMIN: 0
#driver_SEDN: 0
#driver_SEMAX: 0
#driver_SEUP: 0
#driver_SEMIN: 0
#driver_SFILT: 0
#driver_SGT: 0
#driver_SLPH: 0
#driver_SLPL: 0
#driver_DISS2G: 0
#driver_TS2G: 3
#   Set the given parameter during the configuration of the TMC2660
#   chip. This may be used to set custom driver parameters. The
#   defaults for each parameter are next to the parameter name in the
#   list above. See the TMC2660 datasheet about what each parameter
#   does and what the restrictions on parameter combinations are. Be
#   especially aware of the CHOPCONF register, where setting CHM to
#   either zero or one will lead to layout changes (the first bit of
#   HDEC) is interpreted as the MSB of HSTRT in this case).

[tmc2660 stepper_y]
cs_pin: P0.19
spi_speed: 100000
run_current: 1
sense_resistor: 100
idle_current_percent: 20

[tmc2660 stepper_z]
cs_pin: P0.21
spi_speed: 100000
run_current: 1
sense_resistor: 100
idle_current_percent: 20

[tmc2660 extruder]
cs_pin: P0.4
spi_speed: 100000
run_current: 1.2
sense_resistor: 100

# Mini Viki2 LCD - this board does not work with Reprap LCDs
[display]
lcd_type: uc1701
cs_pin: P0.16
a0_pin: P2.6
encoder_pins: ^P3.26, ^!P3.25
click_pin: ^!P2.11
contrast: 0
# menu_root:

[virtual_sdcard]
path: ~/gcode

[static_digital_output external_sd]
pins: P1.21,P2.12
#   A comma separated list of pins to be set as GPIO output pins. The
#   pin will be set to a high level unless the pin name is prefaced
#   with "!". This parameter must be provided.

[display_status]

[pause_resume]

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### set park positon for x and y #####
    # default is your max posion from your printer.cfg
    {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
    {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - 2.0) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    PAUSE_BASE
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E-{E} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}
      G1 Z{z_safe} F900
      G90
      G1 X{x_park} Y{y_park} F6000
    {% else %}
      {action_respond_info("Printer not homed")}
    {% endif %}

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    #### get VELOCITY parameter if specified ####
    {% if 'VELOCITY' in params|upper %}
      {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
    {%else %}
      {% set get_params = "" %}
    {% endif %}
    ##### end of definitions #####
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G91
      G1 E{E} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    RESUME_BASE {get_params}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
    TURN_OFF_HEATERS
    CANCEL_PRINT_BASE
